<Window x:Class="CaveTube.CaveTalk.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:b="clr-namespace:CaveTube.CaveTalk.Behavior"
        xmlns:v="clr-namespace:CaveTube.CaveTalk.View"
        xmlns:rbc="clr-namespace:CaveTube.CaveTalk.Control"
        xmlns:cv="clr-namespace:CaveTube.CaveTalk.Converter"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        x:Name="Root"
        Title="CaveTalk" Width="{Binding Path=WindowWidth, Mode=TwoWay}" Height="{Binding Path=WindowHeight, Mode=TwoWay}" MinHeight="350" Icon="/CaveTalk;component/cavetalk.ico" Topmost="{Binding Path=TopMost}" Top="{Binding Path=WindowTop, Mode=TwoWay}" Left="{Binding Path=WindowLeft, Mode=TwoWay}">
    <Window.Resources>
        <cv:ConnectingStatusConverter x:Key="ConnectingStatusConverter" />
        <cv:AutoLinkConverter x:Key="AutoLinkConverter" />
        <cv:TimeSpanToTotalHoursConverter x:Key="TimeSpanToTotalHoursConverter" />
        <cv:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <!-- DataGridのバインディング用のプロキシ -->
        <FrameworkElement x:Key="ProxyElement" DataContext="{Binding}"/>
        <Style x:Key="DefaultCellStyle" TargetType="DataGridCell">
            <Style.Triggers>
                <Trigger Property="DataGridCell.IsSelected" Value="True">
                    <Setter Property="Background" Value="AliceBlue" />
                    <Setter Property="Foreground" Value="Black" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                </Trigger>
                <DataTrigger Binding="{Binding Path=IsBan}" Value="True">
                    <Setter Property="Background" Value="LightGray" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="MessageHyperlinkStyle" TargetType="Hyperlink">
            <EventSetter Event="RequestNavigate" Handler="OpenUrl" />
            <EventSetter Event="ToolTipOpening" Handler="LoadPreview" />
        </Style>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static Member=v:MainWindow.RestoreWindowCommand}" Executed="RestoreWindowExecuted" />
    </Window.CommandBindings>
    <DockPanel>
        <tb:TaskbarIcon x:Name="MyNotifyIcon" IconSource="/CaveTalk;component/cavetalk.ico" MenuActivation="RightClick" LeftClickCommand="{x:Static Member=v:MainWindow.RestoreWindowCommand}">
            <tb:TaskbarIcon.Style>
                <Style TargetType="{x:Type tb:TaskbarIcon}">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=Root, Path=WindowState}" Value="Minimized" />
                                <Condition Binding="{Binding Path=RoomJoinStatus}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </tb:TaskbarIcon.Style>
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="開く" Click="ResotreWindowButtonClick" />
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>
        <Ribbon DockPanel.Dock="Top" ShowQuickAccessToolBarOnTop="False" Loaded="Ribbon_Loaded">
            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu Label="ファイル" SmallImageSource="/CaveTalk;component/Images/document.png">
                    <RibbonApplicationMenuItem Header="CaveTalkについて(_V)" Command="{Binding Path=AboutBoxCommand}" ImageSource="/CaveTalk;component/Images/info.png" CanAddToQuickAccessToolBarDirectly="False"></RibbonApplicationMenuItem>
                    <RibbonApplicationMenuItem Header="オプション(_O)" Command="{Binding Path=SettingWindowCommand}" ImageSource="/CaveTalk;component/Images/settings.png" CanAddToQuickAccessToolBarDirectly="False"></RibbonApplicationMenuItem>
                    <RibbonApplicationMenuItem Header="終了(_X)" ImageSource="/CaveTalk;component/Images/close.png" Click="Close" />
                </RibbonApplicationMenu>
            </Ribbon.ApplicationMenu>
            <RibbonTab Header="ホーム" Selector.IsSelected="True">
                <RibbonGroup Header="CaveTube" LargeImageSource="/CaveTalk;component/Images/cavetube.png">
                    <RibbonMenuButton Label="接続状態">
                        <RibbonMenuButton.Style>
                            <Style TargetType="{x:Type RibbonMenuButton}">
                                <Setter Property="LargeImageSource" Value="/CaveTalk;component/Images/connect_no.png" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=RoomJoinStatus}" Value="True">
                                        <Setter Property="LargeImageSource" Value="/CaveTalk;component/Images/connect_established.png" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RibbonMenuButton.Style>
                        <RibbonMenuItem Header="部屋から切断する" IsEnabled="{Binding Path=RoomJoinStatus}" Command="{Binding Path=LeaveRoomCommand}" />
                    </RibbonMenuButton>
                    <rbc:RibbonTextBlock Label="接続人数" Text="{Binding Path=Listener, Mode=OneWay}" />
                    <RibbonMenuButton Label="ログイン状態">
                        <RibbonMenuItem Header="ログイン" Command="{Binding Path=LoginCommand}">
                            <RibbonMenuItem.Style>
                                <Style TargetType="RibbonMenuItem">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=LoginStatus}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </RibbonMenuItem.Style>
                        </RibbonMenuItem>
                        <RibbonMenuItem Header="他のアカウントでログイン" Command="{Binding Path=SwitchAccountCommand}">
                            <RibbonMenuItem.Style>
                                <Style TargetType="RibbonMenuItem">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=LoginStatus}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </RibbonMenuItem.Style>
                        </RibbonMenuItem>
                        <RibbonMenuItem Header="ログアウト" Command="{Binding Path=LogoutCommand}">
                            <RibbonMenuItem.Style>
                                <Style TargetType="RibbonMenuItem">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=LoginStatus}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </RibbonMenuItem.Style>
                        </RibbonMenuItem>
                        <RibbonMenuButton.Style>
                            <Style TargetType="{x:Type RibbonMenuButton}">
                                <Setter Property="LargeImageSource" Value="/CaveTalk;component/Images/cavetube_disable.png" />
                                <Setter Property="SmallImageSource" Value="/CaveTalk;component/Images/cavetube_disable.png" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=LoginStatus}" Value="True">
                                        <Setter Property="LargeImageSource" Value="/CaveTalk;component/Images/cavetube.png" />
                                        <Setter Property="SmallImageSource" Value="/CaveTalk;component/Images/cavetube.png" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RibbonMenuButton.Style>
                    </RibbonMenuButton>
                    <RibbonButton LargeImageSource="/CaveTalk;component/Images/webcam.png" Label="配信開始" Command="{Binding Path=StartBroadcastWindowCommand}" IsEnabled="{Binding Path=LoginStatus}" SmallImageSource="/CaveTalk;component/Images/webcam.png" />
                </RibbonGroup>
                <RibbonGroup Header="読み上げ" LargeImageSource="/CaveTalk;component/Images/speak_on.png">
                    <RibbonMenuButton Label="接続状態">
                        <RibbonMenuButton.Style>
                            <Style TargetType="{x:Type RibbonMenuButton}">
                                <Setter Property="LargeImageSource" Value="/CaveTalk;component/Images/speak_off.png" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=SpeakApplicationStatus}" Value="True">
                                        <Setter Property="LargeImageSource" Value="/CaveTalk;component/Images/speak_on.png" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RibbonMenuButton.Style>
                        <RibbonMenuItem Header="読み上げソフトに接続" Command="{Binding Path=ConnectSpeakApplicationCommand}">
                            <RibbonMenuItem.Style>
                                <Style TargetType="RibbonMenuItem">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=SpeakApplicationStatus}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </RibbonMenuItem.Style>
                        </RibbonMenuItem>
                        <RibbonMenuItem Header="読み上げソフトから切断" Command="{Binding Path=DisconnectSpeakApplicationCommand}">
                            <RibbonMenuItem.Style>
                                <Style TargetType="RibbonMenuItem">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=SpeakApplicationStatus}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </RibbonMenuItem.Style>
                        </RibbonMenuItem>
                    </RibbonMenuButton>
                </RibbonGroup>
                <RibbonGroup Header="設定" LargeImageSource="/CaveTalk;component/Images/settings.png">
                    <RibbonButton LargeImageSource="/CaveTalk;component/Images/settings.png" Label="オプション" Command="{Binding Path=SettingWindowCommand}" SmallImageSource="/CaveTalk;component/Images/settings.png" />
                </RibbonGroup>
            </RibbonTab>
        </Ribbon>
        <Border Padding="5" DockPanel.Dock="Top">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="60" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="80" />
                </Grid.ColumnDefinitions>
                <Border Grid.Column="0" BorderThickness="1,1,0,1" BorderBrush="#FFB9C9DA">
                    <Label>配信URL
                        <Label.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FFEDF3F9" Offset="0.619" />
                                <GradientStop Color="White" Offset="0" />
                            </LinearGradientBrush>
                        </Label.Background>
                    </Label>
                </Border>
                <ComboBox Grid.Column="1" IsEditable="True" Text="{Binding Path=LiveUrl}" VerticalContentAlignment="Center">
                    <i:Interaction.Behaviors>
                        <b:ComboBoxPlaceholderBehavior Placeholder="放送URL、またはストリーム番号を入力してください。" />
                        <b:ExecCommandOnEnterKeyDownBehavior Command="JoinRoomCommand" />
                    </i:Interaction.Behaviors>
                </ComboBox>
                <Button Grid.Column="3" Content="接続" Command="{Binding Path=JoinRoomCommand}" />
            </Grid>
        </Border>
        <Border Padding="5" DockPanel.Dock="Bottom">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="80" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="80" />
                </Grid.ColumnDefinitions>
                <TextBox Grid.Column="0" Text="{Binding Path=PostName}">
                    <i:Interaction.Behaviors>
                        <b:TextBoxPlaceholderBehavior Placeholder="名前" />
                    </i:Interaction.Behaviors>
                </TextBox>
                <TextBox Grid.Column="2" Text="{Binding Path=PostMessage, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Path=RoomJoinStatus}" AcceptsReturn="True" MaxLength="4096" MaxLines="3" VerticalScrollBarVisibility="Auto">
                    <i:Interaction.Behaviors>
                        <b:TextBoxPlaceholderBehavior Placeholder="コメントを記述してください。" />
                        <b:ExecCommandOnCtrlOrShiftAndEnterKeyDownBehavior Command="PostCommentCommand" />
                    </i:Interaction.Behaviors>
                </TextBox>
                <Button Grid.Column="4" x:Name="PostKey" Content="書き込み" Command="{Binding Path=PostCommentCommand}" IsEnabled="{Binding Path=RoomJoinStatus}" />
            </Grid>
        </Border>
        <!-- DataGrid用のプロキシ -->
        <ContentControl Visibility="Collapsed" Content="{StaticResource ProxyElement}"/>
        <DataGrid x:Name="CommentGrid" AutoGenerateColumns="False" ItemsSource="{Binding Path=MessageList}" HorizontalGridLinesBrush="LightGray" VerticalGridLinesBrush="LightGray" HeadersVisibility="Column" IsReadOnly="True" SelectedIndex="{Binding Path=MessageIndex}" HorizontalScrollBarVisibility="Disabled" FontSize="{Binding Path=FontSize}">
            <i:Interaction.Behaviors>
                <b:ExecCommandDoubleClickBehavior Command="MarkCommand" />
            </i:Interaction.Behaviors>
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Style.Setters>
                        <Setter Property="ContextMenu">
                            <Setter.Value>
                                <ContextMenu>
                                    <MenuItem Header="Id" IsCheckable="True" IsChecked="{Binding Path=DataContext.DisplayIdColumn, Source={StaticResource ResourceKey=ProxyElement}, Mode=TwoWay}" />
                                    <MenuItem Header="投稿時間" IsCheckable="True" IsChecked="{Binding Path=DataContext.DisplayPostTimeColumn, Source={StaticResource ResourceKey=ProxyElement}, Mode=TwoWay}" />
                                    <MenuItem Header="経過時間" IsCheckable="True" IsChecked="{Binding Path=DataContext.DisplayElapsedPostTimeColumn, Source={StaticResource ResourceKey=ProxyElement}, Mode=TwoWay}" />
                                </ContextMenu>
                            </Setter.Value>
                        </Setter>
                    </Style.Setters>
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Style.Setters>
                        <Setter Property="Background" Value="{Binding Path=Color}" />
                    </Style.Setters>
                    <Style.Triggers>
                        <Trigger Property="DataGridRow.IsSelected" Value="True">
                            <Setter Property="ContextMenu">
                                <Setter.Value>
                                    <ContextMenu>
                                        <MenuItem Header="コメントをコピー"  Command="{Binding Path=CopyCommentCommand}" />
                                        <MenuItem Header="BAN指定" Command="{Binding Path=BanUserCommand}">
                                            <MenuItem.Style>
                                                <Style TargetType="MenuItem">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=IsBan}" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=DataContext.LoginStatus, Source={StaticResource ResourceKey=ProxyElement}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="BAN解除" Command="{Binding Path=UnBanUserCommand}">
                                            <MenuItem.Style>
                                                <Style TargetType="MenuItem">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=IsBan}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=DataContext.LoginStatus, Source={StaticResource ResourceKey=ProxyElement}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="ID表示指定" Command="{Binding Path=ShowIdCommand}">
                                            <MenuItem.Style>
                                                <Style TargetType="MenuItem">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=DataContext.LoginStatus, Source={StaticResource ResourceKey=ProxyElement}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="ID表示解除" Command="{Binding Path=HideIdCommand}">
                                            <MenuItem.Style>
                                                <Style TargetType="MenuItem">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=DataContext.LoginStatus, Source={StaticResource ResourceKey=ProxyElement}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="コメント非表示" Command="{Binding Path=HideCommentCommand}">
                                            <MenuItem.Style>
                                                <Style TargetType="MenuItem">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=IsHide}" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=IsBan}" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=DataContext.LoginStatus, Source={StaticResource ResourceKey=ProxyElement}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="コメント再表示" Command="{Binding Path=ShowCommentCommand}">
                                            <MenuItem.Style>
                                                <Style TargetType="MenuItem">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=IsHide}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=IsBan}" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=DataContext.LoginStatus, Source={StaticResource ResourceKey=ProxyElement}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="インスタントメッセージ送信を許可" Command="{Binding Path=AllowInstantMessageCommand}">
                                            <MenuItem.Style>
                                                <Style TargetType="MenuItem">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=DataContext.LoginStatus, Source={StaticResource ResourceKey=ProxyElement}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="色を付ける" Command="{Binding Path=MarkCommand}" />
                                    </ContextMenu>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Columns>
                <DataGridTextColumn x:Name="CommentNoColumn" Binding="{Binding Path=Number}" Header="No" Width="40" CellStyle="{StaticResource ResourceKey=DefaultCellStyle}" SortDirection="{Binding Path=DataContext.SortDirection, Source={StaticResource ResourceKey=ProxyElement}, Mode=TwoWay}" />
                <DataGridTextColumn Binding="{Binding Path=Name}" Header="Name" Width="80" CellStyle="{StaticResource ResourceKey=DefaultCellStyle}" CanUserSort="False">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsAuth}" Value="True">
                                    <Setter Property="Foreground" Value="ForestGreen" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTemplateColumn Header="Comment" Width="*" CellStyle="{StaticResource ResourceKey=DefaultCellStyle}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ContentControl Content="{Binding Path=Comment, Converter={StaticResource ResourceKey=AutoLinkConverter}}">
                                <ContentControl.Style>
                                    <Style TargetType="ContentControl">
                                        <Style.Resources>
                                            <Style TargetType="TextBlock">
                                                <Style.Setters>
                                                    <Setter Property="TextWrapping" Value="Wrap" />
                                                </Style.Setters>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=IsAsciiArt}" Value="True">
                                                        <Setter Property="FontFamily" Value="IPAMonaPGothic,Monapo,Mona,MS PGothic,sans-serif" />
                                                        <Setter Property="TextWrapping" Value="NoWrap" />
                                                    </DataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Path=IsAsciiArt}" Value="True" />
                                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True" />
                                                        </MultiDataTrigger.Conditions>
                                                        <MultiDataTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <!-- テキストのスクロールアニメーションを入れたい -->
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiDataTrigger.EnterActions>
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                            <Style TargetType="Hyperlink" BasedOn="{StaticResource ResourceKey=MessageHyperlinkStyle}" />
                                        </Style.Resources>
                                    </Style>
                                </ContentControl.Style>
                            </ContentControl>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Binding="{Binding Path=ListenerId}" Header="Id" Width="80" CellStyle="{StaticResource ResourceKey=DefaultCellStyle}" Visibility="{Binding Path=DataContext.DisplayIdColumn, Mode=OneWay, Source={StaticResource ResourceKey=ProxyElement}, Converter={StaticResource ResourceKey=BooleanToVisibilityConverter}}" CanUserSort="False" />
                <DataGridTextColumn Binding="{Binding Path=PostTime, StringFormat=HH:mm:ss}" Header="投稿時間" Width="80" CellStyle="{StaticResource ResourceKey=DefaultCellStyle}" Visibility="{Binding Path=DataContext.DisplayPostTimeColumn, Mode=OneWay, Source={StaticResource ResourceKey=ProxyElement}, Converter={StaticResource ResourceKey=BooleanToVisibilityConverter}}" CanUserSort="False" />
                <DataGridTextColumn Binding="{Binding Path=ElapsedPostTime, Converter={StaticResource ResourceKey=TimeSpanToTotalHoursConverter}}" Header="経過時間" Width="90" CellStyle="{StaticResource ResourceKey=DefaultCellStyle}" Visibility="{Binding Path=DataContext.DisplayElapsedPostTimeColumn, Mode=OneWay, Source={StaticResource ResourceKey=ProxyElement}, Converter={StaticResource ResourceKey=BooleanToVisibilityConverter}}" CanUserSort="False" />
            </DataGrid.Columns>
        </DataGrid>
    </DockPanel>
</Window>
